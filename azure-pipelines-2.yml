trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'  # Usar un agente hospedado compatible

variables:
  pythonVersion: '3.7'  # Cambiar a una versión comúnmente disponible
  requirementsFile: 'requirements.txt'
  testFolder: 'test_test1.py'
  testResultsFile: 'test-results.xml'

steps:
  # Paso 1: Verificar si el token de GitHub está disponible
  - script: |
      if [ -z "$GH_TOKEN" ]; then
        echo "Error: La variable GH_TOKEN no está configurada. Verifica las variables secretas en tu pipeline.";
        exit 1;
      else
        echo "El token GH_TOKEN está configurado correctamente.";
      fi
    displayName: 'Verificar la configuración del token GH_TOKEN'

  # Paso 2: Clonar repositorio de GitHub con autenticación
  - script: |
      git clone https://$GH_TOKEN@github.com/sammyice/python-sample-vscode-flask-tutorial.git
    displayName: 'Hacer Checkout del repositorio en GitHub'

  # Paso 3: Configurar Python
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
      addToPath: true
    displayName: 'Configurar Python $(pythonVersion)'
    continueOnError: false  # Detener el pipeline si no encuentra la versión especificada

  # Paso 4: Instalar dependencias
  - script: |
      python -m pip install --upgrade pip
      pip install -r $(requirementsFile)
    displayName: 'Instalar dependencias'

  # Paso 5: Ejecutar pruebas unitarias
  - script: |
      echo "Ejecutando pruebas unitarias en $(testFolder)"
      pytest $(testFolder) --junitxml=$(testResultsFile)
    displayName: 'Ejecutar pruebas unitarias'

  # Paso 6: Publicar resultados de pruebas
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/$(testResultsFile)'
      testResultsFormat: 'JUnit'
    displayName: 'Publicar resultados de pruebas'