trigger:
  branches:
    include:
      - main

pool:
  name: 'Default'

variables:
  pythonVersion: '3.8'  # Cambiar a una versión comúnmente disponible
  requirementsFile: 'requirements.txt'
  testFolder: 'tests/'  # Cambiar a un directorio de pruebas
  testResultsFile: 'test-results.xml'

steps:
  # Paso 1: Clonar repositorio de GitHub
  - task: CmdLine@2
    inputs:
      script: |
        echo "Clonando el repositorio"
        git clone https://$(GH_TOKEN)@github.com/sammyice/python-sample-vscode-flask-tutorial.git
        cd your-python-repo
    displayName: 'Hacer Checkout del repositorio en GitHub'
    env:
      GH_TOKEN: $(GH_TOKEN)  # Usar la variable secreta directamente en el entorno

  # Paso 2: Configurar Python
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
      addToPath: true
    displayName: 'Configurar Python $(pythonVersion)'
    continueOnError: false

  # Paso 3: Configurar ambiente virtual e instalar dependencias
  - script: |
      python -m venv venv
      source venv/bin/activate
      python -m pip install --upgrade pip
      pip install -r $(requirementsFile)
    displayName: 'Configurar ambiente virtual e instalar dependencias'

  # Paso 4: Ejecutar pruebas unitarias
  - script: |
      echo "Ejecutando pruebas unitarias en $(testFolder)"
      source venv/bin/activate
      pytest $(testFolder) --junitxml=$(testResultsFile)
    displayName: 'Ejecutar pruebas unitarias'

  # Paso 5: Publicar resultados de pruebas
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/$(testResultsFile)'
      testResultsFormat: 'JUnit'
    displayName: 'Publicar resultados de pruebas'

  # Paso 6: Publicar artefactos de pruebas
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/$(testResultsFile)'
      artifactName: 'TestResults'
      publishLocation: 'Container'
    displayName: 'Publicar artefactos de pruebas'
